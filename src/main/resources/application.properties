#server.port=8888 修改端口号
#给对象赋值通过对象.属性=值的方式来赋值,properties的优先级高于yml
#使用占位符表达式取随机整数，在一个文件中引用另一个文件的值的写法等同于占位符表达式，后面可以加冒号写上默认值
student.age=${random.int}

#多环境的切换就是读取不同的properties配置文件
#切换环境后面的值就是配置文件-环境的值，例如application-dev.properties
#spring.profiles.active=dev

#动态切换环境
##i:通过运行参数指定环境
##（1）STS(Eclipse) ：Run Configuration - Argument - program Argument
##--spring.profiles.active=环境名
##(2)命令行方式：
##java -jar 项目名.jar --spring.profiles.active=环境名
##ii:通过vm参数指定环境
##STS(Eclipse) ：Run Configuration - Argument - VM
##-Dspring.profiles.active=环境名

#项目内部的配置文件：
#properties和yml中的配置，相互补充；如果冲突，则properties优先级高。
#spring boot默认能够读取的application.properties/application.yml，这2个文件 可以存在于以下4个地方：
#file:项目根目录/config	 	application.properties
#file:项目根目录			application.properties
#classpath:项目根目录/config	application.properties
#classpath:项目根目录		application.properties

#配置项目路径，在浏览器中打开时要输在controller的映射之前
#server.servlet.context-path=/a

#项目外部的配置文件： (补救)
#在项目Run configuration ,arguments:
#--spring.config.location=D:/application.properties
#如果 同一个配置 同时存在于 内部配置文件 和外部配置文件，则外部>内部
#
#HW.jar   运行，8881--8882
#外部配置文件
#通过命令行 调用外部配置文件
#java -jar  项目.jar  --spring.config.location=D:/application.properties

#项目运行参数： (补救)
#在项目Run configuration ,arguments:
#--server.port=8883
#通过命令行 调用外部配置文件
#java -jar  项目.jar  --server.port=8883
#
#多个地方配置时，如果冲突，优先级：
#命令参数（运行参数 > 调用外部的配置文件）> 内部文件 (properties>yaml)

#配置当前项目日志级别
logging.level.com.example=warn

#将日志放到文件中相对于项目根路径的目录
logging.file=springboot.log

#还可以将日志放到文件夹中
#logging.path=D:/log

#将日志输出在控制台中并格式化（输出在文件中同理，logging.pattern.file）
logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n
#%d:日期时间
#%thread：线程名
#%-5level： 显示日志级别,-5表示从左显示5个字符宽度
#%logger{50} :设置日志长度  ，例如o.s.w.s.m.m.a.
#%msg：日志消息
#%n ：回车

#热部署开启
debug=true
spring.devtools.restart.enabled=true

#外置tomcat需要通过properties设置前后缀，才能在requestMapping中正确的返回
#spring.mvc.view.prefix=/
#spring.mvc.view.suffix=.jsp

#配置log4j2
logging.config=classpath:log4j2.xml